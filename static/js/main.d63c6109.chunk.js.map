{"version":3,"sources":["components/Home.js","components/About.js","components/Contact.js","components/Error.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","About","Contact","Error","Navigation","NavLink","to","App","BrowserRouter","components_Navigation","Switch","Route","path","component","exact","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAUeA,EARF,WACZ,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,uBCKYC,EARD,WACb,OACCH,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,yBCKYE,EARC,WACf,OACCJ,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,2BCKYG,EARD,WACb,OACCL,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,qCCQYI,EAVI,WAClB,OACCN,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAASC,GAAG,KAAZ,QACAR,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAASC,GAAG,UAAZ,SACAR,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAASC,GAAG,YAAZ,aCyBYC,mLArBX,OACCT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KAECV,EAAAC,EAAAC,cAAA,WAECF,EAAAC,EAAAC,cAACS,EAAD,MAEAX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACCZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWhB,EAAMiB,OAAK,IACtChB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWZ,IAChCH,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWX,IAClCJ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOE,UAAWV,cAbRY,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d63c6109.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Home = ()=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<p>Homepage</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Home;","import React from \"react\";\r\n\r\nconst About = ()=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<p>About page</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default About;","import React from \"react\";\r\n\r\nconst Contact = ()=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<p>Contact page</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Contact;","import React from \"react\";\r\n\r\nconst Error = ()=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<p>Page not found</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Error;","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navigation = ()=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<NavLink to=\"/\">Home</NavLink>\r\n\t\t\t<NavLink to=\"/about\">About</NavLink>\r\n\t\t\t<NavLink to=\"/contact\">Contact</NavLink>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Navigation;","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\nimport Home from \"./components/Home\";\nimport About from \"./components/About\";\nimport Contact from \"./components/Contact\";\nimport Error from \"./components/Error\";\nimport Navigation from \"./components/Navigation\";\n\n\nclass App extends Component {\n  render() {\n    return (\n    \t<BrowserRouter>\n\n    \t\t<div>\n\n    \t\t\t<Navigation />\n\n\t    \t\t<Switch>\n\t\t    \t\t<Route path=\"/\" component={Home} exact/>\n\t\t    \t\t<Route path=\"/about\" component={About} />\n\t\t    \t\t<Route path=\"/contact\" component={Contact} />\n\t\t    \t\t<Route component={Error} />\n\t    \t\t</Switch>\n\n    \t\t</div>    \t\t\n\n    \t</BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}